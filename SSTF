#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function to find the index of the closest request to the current head position
int findClosestRequest(int arr[], int n, int head) {
    int min_distance = 999999;  // Set an initially large value
    int index = -1;

    for (int i = 0; i < n; i++) {
        // Calculate distance between head and request
        int distance = abs(arr[i] - head);
        
        // Find the request with the shortest seek time
        if (distance < min_distance) {
            min_distance = distance;
            index = i;
        }
    }
    return index;
}

void SSTF(int requests[], int n, int head) {
    int total_head_moves = 0;
    int seek_sequence[n];
    int count = 0;

    // Loop until all requests are processed
    while (count < n) {
        // Find the closest request to the head
        int index = findClosestRequest(requests, n, head);

        // Add the head move to the total
        total_head_moves += abs(requests[index] - head);
        seek_sequence[count] = requests[index];

        // Update the head position
        head = requests[index];

        // Mark the current request as processed (set it to a large number)
        requests[index] = 999999;

        count++;
    }

    // Output the seek sequence and total head moves
    printf("Seek Sequence: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", seek_sequence[i]);
    }
    printf("\n");

    printf("Total Head Moves: %d\n", total_head_moves);
}

int main() {
    int n, head;

    // Input the number of requests and the initial head position
    printf("Enter the number of disk requests: ");
    scanf("%d", &n);

    int requests[n];
    printf("Enter the disk requests:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    // Call the SSTF function
    SSTF(requests, n, head);

    return 0;
}
