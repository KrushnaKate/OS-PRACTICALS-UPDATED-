#include <stdio.h>

#define MAX_FRAMES 10 // Maximum number of frames

// Function to find the index of the page in the frame
int findPage(int frames[], int frame_size, int page) {
    for (int i = 0; i < frame_size; i++) {
        if (frames[i] == page) {
            return i; // Page found in frame
        }
    }
    return -1; // Page not found
}

// Function to find the page that will not be used for the longest period
int optimalPageReplacement(int frames[], int n, int frame_size, int current_index, int pages[]) {
    int farthest = -1, page_to_replace = -1;

    // Look ahead in the page reference string to find the page that will not be used for the longest time
    for (int i = 0; i < frame_size; i++) {
        int j;
        for (j = current_index + 1; j < n; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    page_to_replace = i;
                }
                break;
            }
        }

        // If the page is not found in future references, replace it
        if (j == n) {
            return i;
        }
    }
    return page_to_replace;
}

// Function to implement the Optimal page replacement algorithm
void Optimal(int pages[], int n, int frame_size) {
    int frames[frame_size]; // Frames to hold pages

    // Initialize frames
    for (int i = 0; i < frame_size; i++) {
        frames[i] = -1; // Empty frame
    }

    int page_faults = 0; // To count page faults

    printf("Page reference string: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");

    // Process each page in the reference string
    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int index = findPage(frames, frame_size, page); // Check if page is in frame

        if (index == -1) { // Page fault occurs
            int replace_index = -1;

            // If there is space in the frame, add the page
            for (int j = 0; j < frame_size; j++) {
                if (frames[j] == -1) {
                    replace_index = j;
                    break;
                }
            }

            if (replace_index == -1) {
                // No empty space, find the optimal page to replace
                replace_index = optimalPageReplacement(frames, n, frame_size, i, pages);
            }

            // Replace the page
            frames[replace_index] = page;
            page_faults++; // Increment page fault count
        }

        // Print the current frame state
        printf("Frames after processing page %d: ", page);
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            }
        }
        printf("\n");
    }

    printf("Total page faults: %d\n", page_faults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3}; // Example page reference string
    int n = sizeof(pages) / sizeof(pages[0]); // Length of page reference string

    int frame_size = 3; // Frame size

    if (frame_size < 3) {
        printf("Frame size must be at least 3\n");
        return 1;
    }

    Optimal(pages, n, frame_size); // Call the Optimal function

    return 0;
}
