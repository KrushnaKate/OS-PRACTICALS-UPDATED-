#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

// Function to compare integers for qsort
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int main(int argc, char *argv[]) {
    int n;

    // Prompt the user for the number of elements in the array
    printf("Enter number of elements: ");
    scanf("%d", &n);

    int array[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &array[i]);
    }

    // Sort the array
    qsort(array, n, sizeof(int), compare);

    // Display sorted array
    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    // Convert the sorted array to command-line arguments
    char *args[n + 2]; // +2 for the program name and NULL terminator
    args[0] = "./reverse_program"; // Name of the program to be executed by execve
    for (int i = 0; i < n; i++) {
        char *arg = (char *)malloc(20 * sizeof(char));
        snprintf(arg, 20, "%d", array[i]);
        args[i + 1] = arg;
    }
    args[n + 1] = NULL; // NULL terminator for execve arguments

    // Fork a child process
    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        // In child process
        printf("Child process executing reverse_program...\n");

        // Execute the reverse_program with the sorted array as arguments
        if (execve(args[0], args, NULL) == -1) {
            perror("execve failed");
            exit(1);
        }
    } else {
        // In parent process
        wait(NULL); // Wait for the child process to finish
        printf("Parent process: Child has finished executing.\n");
    }

    // Free allocated memory
    for (int i = 1; i <= n; i++) {
        free(args[i]);
    }

    return 0;
}




====================


#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    printf("Array in reverse order:\n");
    for (int i = argc - 1; i > 0; i--) { // Start from argc - 1 to skip program name
        printf("%s ", argv[i]);
    }
    printf("\n");
    return 0;
}