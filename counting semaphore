#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 5  // Size of the buffer

int buffer[BUFFER_SIZE];  // Shared buffer
int in = 0;               // Producer index
int out = 0;              // Consumer index

// Semaphores
sem_t empty;              // Counts empty slots in the buffer
sem_t full;               // Counts filled slots in the buffer
pthread_mutex_t mutex;    // Mutex to protect critical sections

// Producer function
void* producer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {  // Produce 10 items
        item = rand() % 100;        // Generate a random item

        sem_wait(&empty);           // Wait if buffer is full
        pthread_mutex_lock(&mutex); // Lock the buffer for mutual exclusion

        // Add item to the buffer
        buffer[in] = item;
        printf("Producer produced item %d at index %d\n", item, in);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex); // Unlock the buffer
        sem_post(&full);              // Signal that an item was added

        sleep(1);                     // Simulate time taken to produce an item
    }
    return NULL;
}

// Consumer function
void* consumer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {  // Consume 10 items
        sem_wait(&full);            // Wait if buffer is empty
        pthread_mutex_lock(&mutex); // Lock the buffer for mutual exclusion

        // Remove item from the buffer
        item = buffer[out];
        printf("Consumer consumed item %d from index %d\n", item, out);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex); // Unlock the buffer
        sem_post(&empty);             // Signal that a slot was emptied

        sleep(1);                     // Simulate time taken to consume an item
    }
    return NULL;
}

int main() {
    pthread_t prod_thread, cons_thread;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);  // BUFFER_SIZE empty slots initially
    sem_init(&full, 0, 0);             // No filled slots initially
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prod_thread, NULL, producer, NULL);
    pthread_create(&cons_thread, NULL, consumer, NULL);

    // Wait for the threads to finish
    pthread_join(prod_thread, NULL);
    pthread_join(cons_thread, NULL);

    // Cleanup
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
