#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <ctype.h>
#include <sys/wait.h>

#define FIFO1 "fifo1"
#define FIFO2 "fifo2"

int main() {
    char input[100];
    char output[100];
    
    // Create the named pipes (FIFOs)
    if (mkfifo(FIFO1, 0666) == -1 || mkfifo(FIFO2, 0666) == -1) {
        perror("mkfifo failed");
        exit(1);
    }
    
    pid_t pid = fork();
    
    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {  // Child process
        // Open FIFO1 for reading and FIFO2 for writing
        int read_fd = open(FIFO1, O_RDONLY);
        int write_fd = open(FIFO2, O_WRONLY);
        
        if (read_fd == -1 || write_fd == -1) {
            perror("Child: open failed");
            exit(1);
        }
        
        // Read the message from FIFO1
        read(read_fd, input, sizeof(input));
        printf("Child received: %s\n", input);

        // Perform some operation (for example, converting to uppercase)
        for (int i = 0; input[i]; i++) {
            output[i] = toupper(input[i]);
        }
        output[strlen(input)] = '\0';

        // Write the processed message to FIFO2
        write(write_fd, output, strlen(output) + 1);
        
        // Close file descriptors
        close(read_fd);
        close(write_fd);
        
        exit(0);  // Child process ends here
    } else {  // Parent process
        // Open FIFO1 for writing and FIFO2 for reading
        int write_fd = open(FIFO1, O_WRONLY);
        int read_fd = open(FIFO2, O_RDONLY);
        
        if (write_fd == -1 || read_fd == -1) {
            perror("Parent: open failed");
            exit(1);
        }
        
        // Prompt and write a message to FIFO1
        printf("Enter a message: ");
        fgets(input, sizeof(input), stdin);
        input[strlen(input) - 1] = '\0';  // Remove newline character
        write(write_fd, input, strlen(input) + 1);

        // Read the processed message from FIFO2
        read(read_fd, output, sizeof(output));
        printf("Parent received: %s\n", output);
        
        // Close file descriptors
        close(write_fd);
        close(read_fd);
        
        // Remove the FIFOs
        unlink(FIFO1);
        unlink(FIFO2);
        
        // Wait for child process to finish
        wait(NULL);
    }
    
    return 0;
}