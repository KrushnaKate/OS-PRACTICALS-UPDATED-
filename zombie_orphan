#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

void asc(int arr[],int n){


  for(int i=0;i<n-1;i++){
    for(int j = 0;j<n-i-1;j++){
      if(arr[j]>arr[j+1]){
        int temp = arr[j];
        arr[j] = arr[j+1];
        arr[j+1] = temp;
      }
    }
  }
}
void desc(int arr[],int n){


  for(int i=0;i<n-1;i++){
    for(int j = 0;j<n-i-1;j++){
      if(arr[j]<arr[j+1]){
        int temp = arr[j];
        arr[j] = arr[j+1];
        arr[j+1] = temp;
      }
    }
  }
}

void printArr(int arr[],int n){
  for(int i = 0;i<n;i++){
    printf("%d",arr[i]);
  printf(" ");
  }
  printf("\n");

}

int main(){
  int n,i;
  printf("enter array size");
  scanf("%d", &n);
  
  int arr[n];
  for(int i = 0;i<n;i++){
    scanf("%d",&arr[i]);
  }
  
  int pid = fork();
  
  if(pid<0){
    printf("fork failed");
    exit(1);
  }
  
  else if(pid==0){
    //uncomment this for orphan demo
    //sleep(5);
    printf("child process (PID:%d) \n",getpid());
    printf("parent (PID:%d) \n",getppid());
    printf("sorted by child \n");
    asc(arr,n);
    printArr(arr,n);
   
    }
  else{
    //uncomment this for zombie demo
    //system("ps -el | grep Z");
    //i=wait(0);


    printf("terminated child (PID:%d) \n",i);
    printf("parent (PID:%d) \n",getpid());
    printf("sorted by parent \n");
    desc(arr,n);
    printArr(arr,n);

    //uncomment this for orphan demo
    //exit(0);

    
  }
    
  return 0;


}


